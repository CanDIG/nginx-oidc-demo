# Resolver needed for OIDC URL resolution
resolver 127.0.0.11;

proxy_ssl_server_name on;
proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;


server
{
  listen 80 default_server;
  server_name nginx;
  root /opt/nginx/html;
  access_by_lua '
  local opts =
  {
    redirect_uri_path = "/redirect_uri",
    accept_none_alg = true,
    discovery = "http://192.168.33.123:8080/auth/realms/mockrealm/.well-known/openid-configuration",
    client_id = "mock_login_client",
    client_secret = "mock_login_secret",
    redirect_uri_scheme = "http",
    logout_path = "/logout",
    redirect_after_logout_with_id_token_hint = false,
    session_contents =
    {
      id_token=true
    }
  }
  -- call introspect for OAuth 2.0 Bearer Access Token validation
  local res, err = require("resty.openidc").authenticate(opts)
  if err then
  ngx.status = 403
  ngx.say(err)
  ngx.exit(ngx.HTTP_FORBIDDEN)
  end
  ';
  # I disabled caching so the browser won't cache the site.
  expires 0;
  add_header Cache-Control private;
  location /
  {
  proxy_pass http://httpbin.org;
  }
}

server
{
  listen 443;
  server_name nginx;

  ssl on;
  ssl_certificate_key /etc/ssl/certs/nginx_server.key;
  ssl_certificate /etc/ssl/certs/nginx_server.crt;
  ssl_session_timeout 30m;

  # OIDC configuration
  access_by_lua '
  local opts =
    {
      redirect_uri_path = "/redirect_uri",
      accept_none_alg = true,
      discovery = "https://192.168.33.123:8443/auth/realms/mockrealm/.well-known/openid-configuration",
      client_id = "mock_login_client",
      client_secret = "mock_login_secret",
      redirect_uri_scheme = "http",
      logout_path = "/logout",
      redirect_after_logout_with_id_token_hint = false,
      session_contents =
      {
        id_token=true
      }
    }
    -- call introspect for OAuth 2.0 Bearer Access Token validation
    local res, err = require("resty.openidc").authenticate(opts)
    if err then
    ngx.status = 403
    ngx.say(err)
    ngx.exit(ngx.HTTP_FORBIDDEN)
    end
    ';

  location /
  {
    proxy_pass https://httpbin.org;
  }

  error_page 500 502 503 504 /50x.html;
  location = /50x.html
  {
    root /usr/local/openresty/nginx/html;
  }
}